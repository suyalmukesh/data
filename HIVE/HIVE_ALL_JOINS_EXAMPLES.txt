Map Join in Hive

Map join is a Hive feature that is used to speed up Hive queries. It lets a table to be loaded into memory so that a join could be performed within a mapper 
without using a Map/Reduce step. If queries frequently depend on small table joins, using map joins speed up queries’ execution. 
Map join is a type of join where a smaller table is loaded in memory and the join is done in the map phase of the MapReduce job. 
As no reducers are necessary, map joins are way faster than the regular joins.

Only hive.auto.convert.join is a map join option that must be set to true while other options are optional and have default values. 
So, it is not necessary to change the default values.

Here are the Hive map join options:

hive.auto.convert.join: Set this option to true. Once this option is set to true, during joins, when a table with a size less 
than 25 MB (hive.mapjoin.smalltable.filesize) is found, the joins are converted to map-based joins.

hive.auto.convert.join.noconditionaltask: When three or more tables are involved in the join condition. 
Using hive.auto.convert.join, Hive generates three or more map-side joins with an assumption that all tables are of smaller size. Using
hive.auto.convert.join.noconditionaltask, you can combine three or more map-side joins into a single map-side join if 
size of n-1 table is less than 10 MB. (This rule is defined by hive.auto.convert.join.noconditionaltask.size.)


Bucket Join

In bucketing, the data at storage level is distributed in buckets. Each bucket is expected to hold certain rows based on the bucketing key/column.

As an example, lets say there are two tables user and user_visits and both table data is bucketed using user_id in 4 buckets . 
It means bucket 1 of user will contain rows with same user ids as that of bucket 1 of user_visits. And if a join is performed on 
these two tables on user_id columns, if it is possible to send bucket 1 of both tables to same mapper then good amount of
optimization can be achived. This is exactly done in bucketed map join.

Prerequisites for bucket map join:

Tables being joined are bucketized on the join columns,
The number of buckets in one table is a multiple of the number of buckets in the other table, the buckets can be joined with each other
If the tables being joined are bucketized on the join columns, and the number of buckets in one table is a multiple of the number of
buckets in the other table, the buckets can be joined with each other. If table A has 4 buckets and table B has 4 buckets, the following join

SELECT /*+ MAPJOIN(b) */ a.key, a.valueFROM a JOIN b ON a.key = b.key 

can be done on the mapper only. Instead of fetching B completely for each mapper of A, only the required buckets are fetched. 
For the query above, the mapper processing bucket 1 for A will only fetch bucket 1 of B. It is not the default behavior, 
and is governed by the following parameter

set hive.optimize.bucketmapjoin = true

If the tables being joined are sorted and bucketized on the join columns, and they have the same number of buckets,
a sort-merge join can be performed. The corresponding buckets are joined with each other at the mapper. If both A and B have 4 buckets,

SELECT /*+ MAPJOIN(b) */ a.key, a.valueFROM A a JOIN B b ON a.key = b.key 

can be done on the mapper only. The mapper for the bucket for A will traverse the corresponding bucket for B. This is not the 
default behavior, and the following parameters need to be set:

set hive.input.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;

set hive.optimize.bucketmapjoin = true;

set hive.optimize.bucketmapjoin.sortedmerge = true;